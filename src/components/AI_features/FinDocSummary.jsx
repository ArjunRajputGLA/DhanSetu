import { useState } from 'react';
import { Upload, RefreshCw, Download, Copy, ArrowRight, Check, File, Type } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { getGroqResponse } from './services/api';

const FinDocSummarySection = () => {
  const [file, setFile] = useState(null);
  const [text, setText] = useState('');
  const [summary, setSummary] = useState('');
  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [activeMethod, setActiveMethod] = useState(null);
  const [downloading, setDownloading] = useState(false);
  const [error, setError] = useState('');

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    setFile(file);
    setActiveMethod('upload');
    
    // Read file content
    if (file) {
      const reader = new FileReader();
      reader.onload = async (e) => {
        setText(e.target.result);
      };
      reader.readAsText(file);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = async (e) => {
    e.preventDefault();
    setIsDragging(false);
    const file = e.dataTransfer.files[0];
    setFile(file);
    setActiveMethod('upload');
    
    // Read dropped file content
    if (file) {
      const reader = new FileReader();
      reader.onload = async (e) => {
        setText(e.target.result);
      };
      reader.readAsText(file);
    }
  };

  const handleTextInput = (event) => {
    setText(event.target.value);
    setActiveMethod('text');
  };

  const handleSummarize = async () => {
    setLoading(true);
    setError('');
    
    try {
      const messageHistory = [
        {
          role: 'system',
          content: 'You are a specialized financial document analysis AI. Your task is to analyze financial documents and provide clear, structured summaries. Focus on key metrics, trends, and insights. If the content is not financial in nature, politely explain that you can only analyze financial documents.',
        },
        {
          role: 'user',
          content: `Please analyze this financial document and provide a summary: ${text}`,
        },
      ];

      const response = await getGroqResponse(messageHistory);
      setSummary(response);
    } catch (err) {
      setError('Failed to generate summary. Please try again.');
      console.error('Summary generation error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(summary);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handleDownload = () => {
    setDownloading(true);
    
    const timestamp = new Date().toLocaleString();
    const reportContent = `Financial Analysis Report
Generated on: ${timestamp}

Source: ${activeMethod === 'upload' ? file.name : 'Text Input'}

${summary}

Generated by FinDoc Summary Tool
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `financial-analysis-${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    
    setTimeout(() => setDownloading(false), 1000);
  };

  const resetSelection = () => {
    setActiveMethod(null);
    setFile(null);
    setText('');
    setSummary('');
    setError('');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 p-8">
      <div className="max-w-6xl mx-auto space-y-8 animate-fadeIn">
        <div className="text-center space-y-4 mb-12">
          <h1 className="text-4xl font-bold text-blue-600 tracking-tight animate-slideDown">
            FinDoc Summary
          </h1>
          <p className="text-lg text-gray-600 animate-slideUp max-w-2xl mx-auto">
            Transform complex financial documents into clear, actionable insights
          </p>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 p-4 rounded-xl text-center animate-slideUp">
            {error}
          </div>
        )}

        {!activeMethod ? (
          <div className="grid md:grid-cols-2 gap-8">
            <Card 
              className="border-2 hover:border-blue-300 transition-all duration-300 cursor-pointer group"
              onClick={() => setActiveMethod('upload')}
            >
              <CardContent className="p-8 flex flex-col items-center justify-center min-h-[400px] text-center">
                <File className="w-16 h-16 text-blue-500 mb-6 group-hover:scale-110 transition-transform" />
                <h2 className="text-2xl font-semibold mb-4">Upload Document</h2>
                <p className="text-gray-600 mb-8">
                  Upload financial reports, statements, or other documents for analysis
                </p>
                <Button 
                  className="bg-blue-500 hover:bg-blue-600 text-white px-8 py-6 h-auto text-lg font-medium rounded-xl 
                    shadow-lg hover:shadow-xl transform transition-all duration-300 hover:-translate-y-1 
                    flex items-center gap-3"
                >
                  Choose File
                  <Upload className="w-5 h-5 group-hover:animate-bounce" />
                </Button>
              </CardContent>
            </Card>

            <Card 
              className="border-2 hover:border-blue-300 transition-all duration-300 cursor-pointer group"
              onClick={() => setActiveMethod('text')}
            >
              <CardContent className="p-8 flex flex-col items-center justify-center min-h-[400px] text-center">
                <Type className="w-16 h-16 text-blue-500 mb-6 group-hover:scale-110 transition-transform" />
                <h2 className="text-2xl font-semibold mb-4">Paste Text</h2>
                <p className="text-gray-600 mb-8">
                  Paste your financial text directly for instant analysis
                </p>
                <Button 
                  className="bg-blue-500 hover:bg-blue-600 text-white px-8 py-6 h-auto text-lg font-medium rounded-xl 
                    shadow-lg hover:shadow-xl transform transition-all duration-300 hover:-translate-y-1 
                    flex items-center gap-3"
                >
                  Enter Text
                  <Type className="w-5 h-5 group-hover:animate-pulse" />
                </Button>
              </CardContent>
            </Card>
          </div>
        ) : (
          <>
            <Card className="border-2 transition-all duration-300 animate-slideUp">
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle className="text-2xl text-blue-600">
                  {activeMethod === 'upload' ? 'Document Upload' : 'Text Input'}
                </CardTitle>
                <Button variant="outline" onClick={resetSelection}>
                  Choose Different Method
                </Button>
              </CardHeader>
              <CardContent className="p-8">
                {activeMethod === 'upload' ? (
                  <div 
                    className={`border-3 border-dashed rounded-xl p-12 text-center transition-all duration-300 
                      ${isDragging ? 'border-blue-400 bg-blue-50 scale-102' : 'border-gray-200 hover:border-blue-200'}`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                  >
                    <input
                      type="file"
                      id="file-upload"
                      className="hidden"
                      onChange={handleFileUpload}
                      accept=".pdf,.doc,.docx,.txt,.xls,.xlsx"
                    />
                    <label
                      htmlFor="file-upload"
                      className="cursor-pointer flex flex-col items-center gap-4 group"
                    >
                      <Upload className={`w-16 h-16 transition-all duration-300 
                        ${isDragging ? 'text-blue-500 scale-110' : 'text-gray-400 group-hover:text-blue-400'}`} 
                      />
                      <div className="space-y-2">
                        <p className="text-lg text-gray-700 font-medium">
                          Drop your financial document here or click to upload
                        </p>
                        <p className="text-sm text-gray-500">
                          Supports Annual Reports, Financial Statements, SEC Filings (PDF, DOC, DOCX, TXT, XLS, XLSX)
                        </p>
                      </div>
                    </label>
                    {file && (
                      <div className="mt-6 text-sm font-medium text-blue-600">
                        Selected: <span className="font-semibold">{file.name}</span>
                      </div>
                    )}
                  </div>
                ) : (
                  <textarea
                    className="w-full h-64 p-6 border rounded-xl resize-none transition-all duration-300
                      focus:border-blue-300 focus:ring-4 focus:ring-blue-100 hover:border-blue-200
                      text-gray-700 text-lg"
                    placeholder="Paste your financial text here (e.g., quarterly reports, financial statements, market analysis)..."
                    value={text}
                    onChange={handleTextInput}
                  />
                )}

                <div className="flex justify-center mt-8">
                  <Button
                    onClick={handleSummarize}
                    disabled={loading || !text}
                    className={`
                      relative overflow-hidden group
                      w-64 h-16 text-lg font-medium
                      bg-gradient-to-r from-blue-500 to-blue-600
                      hover:from-blue-600 hover:to-blue-700
                      disabled:from-blue-300 disabled:to-blue-400
                      rounded-xl shadow-lg hover:shadow-xl
                      transform transition-all duration-300
                      hover:-translate-y-1
                      ${loading ? 'animate-pulse' : ''}
                    `}
                  >
                    <span className={`
                      absolute inset-0 flex items-center justify-center gap-3
                      transition-all duration-300
                      ${loading ? 'opacity-0' : 'opacity-100'}
                    `}>
                      Analyze Now
                      <ArrowRight className={`
                        w-6 h-6
                        transform transition-all duration-300
                        group-hover:translate-x-1
                        ${loading ? '' : 'group-hover:animate-pulse'}
                      `} />
                    </span>
                    {loading && (
                      <span className="absolute inset-0 flex items-center justify-center">
                        <RefreshCw className="w-6 h-6 animate-spin" />
                      </span>
                    )}
                    <span className={`
                      absolute inset-0 bg-gradient-to-r from-blue-400/20 to-transparent
                      transform transition-all duration-1000 
                      ${loading ? 'translate-x-full animate-shimmer' : '-translate-x-full'}
                    `} />
                  </Button>
                </div>
              </CardContent>
            </Card>

            {summary && (
              <Card className="border-2 transition-all duration-300 animate-slideUp">
                <CardHeader>
                  <CardTitle className="text-2xl text-blue-600">Analysis Results</CardTitle>
                </CardHeader>
                <CardContent className="p-8">
                  <div className="bg-gradient-to-r from-blue-50/50 to-white p-8 rounded-xl">
                    <pre className="whitespace-pre-wrap font-sans text-gray-700 leading-relaxed">
                      {summary}
                    </pre>
                    <div className="flex gap-4 mt-8">
                      <Button
                        variant="outline"
                        onClick={handleCopy}
                        className="flex items-center gap-2 hover:bg-blue-50 transition-all duration-200"
                        disabled={copied}
                      >
                        {copied ? (
                          <Check className="w-5 h-5 text-green-500" />
                        ) : (
                          <Copy className="w-5 h-5" />
                        )}
                        {copied ? 'Copied!' : 'Copy Analysis'}
                      </Button>
                      <Button
                        variant="outline"
                        onClick={handleDownload}
                        disabled={downloading}
                        className="flex items-center gap-2 hover:bg-blue-50 transition-all duration-200 relative"
                      >
                        {downloading ? (
                          <>
                            <RefreshCw className="w-5 h-5 animate-spin" />
                            <span>Downloading...</span>
                          </>
                        ) : (
                          <>
                            <Download className="w-5 h-5 group-hover:animate-bounce" />
                            <span>Download Report</span>
                          </>
                        )}
                        {downloading && (
                          <span className="absolute bottom-0 left-0 h-1 bg-blue-500 animate-progress w-full" />
                        )}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default FinDocSummarySection;